"""
Django settings for Server project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import os
import json
from pathlib import Path


CONFIG_FILE_PATH = Path(__file__).resolve().parent / "config.json"
 
if not CONFIG_FILE_PATH.exists():
    raise FileNotFoundError(f"Config file not found at {CONFIG_FILE_PATH}")
 
with open(CONFIG_FILE_PATH, 'r') as configFile:
    config_data = json.load(configFile)

PROJECT_DIR = Path(__file__).resolve().parent.parent.parent
print("project dir", PROJECT_DIR);

# Data Directory
HOME = PROJECT_DIR / config_data['DATA_DIR'].lstrip('/')
print("home", HOME)

#Data Directory

CVECHECKER_DATA = 'cvechecker-data'
BASE_DIR = os.path.join(HOME, CVECHECKER_DATA)

# Ensure the directories exist
if not os.path.exists(BASE_DIR):
    os.makedirs(BASE_DIR)

#Log Directory
LOG_DIR = PROJECT_DIR / config_data['LOG_DIR'].lstrip('/')
LOG_DIR_PATH = os.path.join(LOG_DIR, 'cvechecker-log')

if not os.path.exists(LOG_DIR_PATH):
	os.makedirs(LOG_DIR_PATH)

LOG_FILE_NAME = 'cvechecker.log'
LOG_LEVEL = config_data['LOG_LEVEL']
REPORT_PATH =  PROJECT_DIR / config_data['REPORT_PATH'].lstrip('/')
if not os.path.exists(REPORT_PATH):
    os.makedirs(REPORT_PATH)

DICTIONARY_PATH = PROJECT_DIR / config_data['DICTIONARY_PATH'].lstrip('/')

# Load paths from config.json
CONFIG_FILE_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', 'config.json'))

def load_paths_from_config():
    if not os.path.exists(CONFIG_FILE_PATH):
        print(f"Config file {CONFIG_FILE_PATH} not found.")
        return None

    with open(CONFIG_FILE_PATH, 'r') as config_file:
        config_data = json.load(config_file)
        return config_data

def check_path_exists(path, path_name):
    if os.path.exists(path):
        print(f"{path_name} exists: {path}")


    else:
        print(f"{path_name} does NOT exist: {path}. Creating directory...")
        print(f"{path_name} does NOT exist: {path}. Creating directory...")
        os.makedirs(path)
        print(f"Directory created: {path}")

config_data = load_paths_from_config()
download_path = config_data.get('download_dir', None)
check_path_exists(download_path, "Upload Path")


DATABASE_DIR = os.path.join(download_path, CVECHECKER_DATA)

# Ensure the directories exist
if not os.path.exists(DATABASE_DIR):
    os.makedirs(DATABASE_DIR)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-f!ny&3rd-!n$qa&(h6+$$n_*iws=8$vj!uf4^9@2m$y4i8q6gd'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'serverapp',
    'django_cron'
]


DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Configure django-cron
CRON_CLASSES = [
    'serverapp.cron.UpdateV2CronJob',
]

DJANGO_CRON_LOG_FILE = "/cve-checker-tool-4.0/cli/Server/serverapp/cronjob.log"
DJANGO_CRON_DELETE_LOGS_OLDER_THAN = 7




# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        "NAME": os.path.join(DATABASE_DIR, "NVDDatabase_v2.0.db"),
    }
}



USE_TZ = True



